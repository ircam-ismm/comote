// just keep this for history
// This just crash on startup in android preview

import * as React from 'react';

import {
  Platform,
  Text,
} from 'react-native';

import {
  DeviceMotion,
  // Accelerometer,
  // Barometer,
  // Gyroscope,
  // Magnetometer,
  // MagnetometerUncalibrated,
  // Pedometer,
} from 'expo-sensors';

import { useAppSelector, useAppDispatch } from '../hooks';
import { selectSettings, getSettingsInitialState } from '../features/settings/settingsSlice';

// @see - https://www.w3.org/TR/orientation-event/#devicemotion
// @todo - https://w3c.github.io/accelerometer/
const g = 9.80665;

const normalizeAndroid = () => {
  // interval is a timestamp in nanosecond, compute delta
  // @note: in development the framerate is very unstable
  // @todo: check what it does in production mode
  let lastInterval = null;

  return e => {
    if (!lastInterval) {
      lastInterval = e.interval;
      return null;
    }

    const interval = (e.interval - lastInterval) * 1e-6;
    lastInterval = e.interval;

    return {
      interval: interval,
      accelerationIncludingGravity: {
        x: -e.accelerationIncludingGravity.x,
        y: -e.accelerationIncludingGravity.y,
        z: -e.accelerationIncludingGravity.z,
      },
      rotationRate: {
        alpha: e.rotationRate.alpha,
        beta: e.rotationRate.beta,
        gamma: e.rotationRate.gamma,
      }
    };
  }
}

const normalizeIOS = () => {
  // @todo
  return e => {

    return e;
  }
}

const normalizeDeviceMotion = Platform.OS === 'android'
  ? normalizeAndroid()
  : normalizeIOS();

export default function SensorsComponent({color}) {
  const settings = useAppSelector(state => selectSettings(state));
  const { deviceMotionFrequency } = getSettingsInitialState();
  const dispatch = useAppDispatch();

  const [deviceMotionListener, setDeviceMotionListener] = React.useState(null);

  const setDeviceMotionFrequency = (frequency) => {
    const interval = frequency > 0
      ? 1000 / frequency
      : 1000 / deviceMotionFrequency;

    DeviceMotion.setUpdateInterval(interval);
  };

  const deviceMotionSubscribe = () => {
    console.log('accelerometer.subscribe');
    setDeviceMotionFrequency(settings.deviceMotionFrequency);

    setDeviceMotionListener(
      DeviceMotion.addListener(e => {
        const normalizedDeviceMotion = normalizeDeviceMotion(e);
        // normalize may return null (see normalize Android)
        if (normalizedDeviceMotion !== null) {
          dispatch({
            type: 'sensors/set',
            payload: {
              devicemotion: normalizedDeviceMotion,
            },
          });
        }
      })
    );
  };

  const deviceMotionUnsubscribe = () => {
    console.log('deviceMotion.unsubscribe');
    deviceMotionListener && deviceMotionListener.remove();
    setDeviceMotionListener(null);
  };

  // see https://daveceddia.com/useeffect-hook-examples/
  // run once and callback on unmount
  let last = null;
  React.useEffect(async () => {
    if (await DeviceMotion.isAvailableAsync()) {
      deviceMotionSubscribe();
    } else {
      // @todo - dispatch error
    }

    // console.log('run once and (on unmount except first time)');
    // deviceMotionSubscribe();
    // return () => DeviceMotion.removeAllListeners();
    return () => deviceMotionUnsubscribe();
  }, []);

  // run on dependencies update
  React.useEffect(() => {
    // console.log('update settings.accelerometerFrequency');
    setDeviceMotionFrequency(settings.deviceMotionFrequency);
  }, [settings.deviceMotionFrequency]);


  return (
    <Text>
      Sensors Component
    </Text>
  );
}
