// Warning: non-persistent data

import {
  createSlice,
  createAsyncThunk,
  createAction,
  Action,
  AnyAction,
  PayloadAction,
} from '@reduxjs/toolkit';
import type { RootState, AppThunk } from '../../store';

import { network } from '../../network';

interface NetworkState {
  data: any;
  status: 'idle' | 'loading' | 'error';
}

const initialState = {
  data: {
    webSocketReadyState: 'CLOSED',
  },
  status: 'idle',
} as NetworkState;

interface RejectedAction extends Action {
  error: Error
}

function isRejectedAction(action: AnyAction): action is RejectedAction {
  return action.type.endsWith('rejected')
}

const networkSlice = createSlice({
  name: 'network',
  initialState,
  reducers: {

    set: (state, action: PayloadAction<any>) => {
      Object.assign(state.data, action.payload);
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(isRejectedAction,
        // `action` will be inferred as a RejectedAction due to
        // isRejectedAction being defined as a type guard
        (state: NetworkState, action) => {
          state.status = 'error';
        }
      )
      // and provide a default case if no other handlers matched
      .addDefaultCase((state, action) => { });
  },
});

export const {
  set,
} = networkSlice.actions;

// The function below is called a selector and allows us to select a data from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectNetwork = (state: RootState) => {
  return state.network.data;
}

export default networkSlice.reducer;
